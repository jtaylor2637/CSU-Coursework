#BlueJ class context
comment0.target=GenomeTester
comment0.text=\r\n\ Write\ a\ description\ of\ class\ GenomeTester\ here.\r\n\ \r\n\ @Jacob\ Taylor\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=length
comment1.target=Genome\ randomGenome(int)
comment1.text=\ Method\ returns\ a\ random\ genome\ from\ the\ population\ of\ the\ appropriate\ length\r\n\ \r\n
comment10.params=
comment10.target=double\ randUniformPositive()
comment10.text=\r\n\ helper\ method\ for\ finding\ random\r\n
comment11.params=pop
comment11.target=Genome\ selectPair(java.util.ArrayList)
comment11.text=\r\n\ gets\ a\ genome\ based\ on\ roulette\ wheel\ selection\ to\ be\ used\ for\ the\ population\r\n\ referenced\ from\ wikipedia\ code\ to\ obtain\ direction\ of\ how\ to\ accomplish\ this\r\n
comment12.params=
comment12.target=void\ generationalInfo()
comment12.text=\r\n\ printer\ method\ to\ help\ format\ output\ to\ screen\r\n
comment13.params=fileName
comment13.target=void\ writeRun(java.lang.String)
comment13.text=\r\n\ uses\ casted\ writers\ to\ append\ each\ generation's\ info\ to\ the\ file\ it\ is\ currently\ on\r\n
comment14.params=y
comment14.target=void\ writeTable(int)
comment14.text=\r\n\ does\ the\ final\ write\ out\ to\ the\ table\ file\ to\ calculate\ the\ avg\ generation\ found\ and\ the\ location\ for\ each\ run.\r\n
comment15.params=args
comment15.target=void\ runGA(java.lang.String[])
comment15.text=\r\n\ main\ method,\ takes\ in\ command\ line\ arguments\ in\ form\ of\ {"100",\ "0.7",\ "0.001",\ "run1.txt"}\r\n\ \ \ \ \ where\ 100\ is\ the\ pop\ size,\ .7\ is\ the\ crossover\ rate,\ .001\ is\ the\ mutation\ rate\ and\ run1.txt\ is\ the\ run\ file\r\n
comment2.params=size\ length
comment2.target=void\ makePopulation(int,\ int)
comment2.text=\r\n\ creates\ the\ initial\ population,\ an\ arraylist\ of\ genomes\ consisting\ of\ random\ bit\ strings\r\n
comment3.params=size\ length
comment3.target=void\ makeChildPopulation(int,\ int)
comment3.text=\r\n\ creates\ child\ population\ by\ selecting\ two\ parent\ genes,\ performing\ crossover\ and\ mutation\ if\ the\ random\ value\ is\ within\ range\r\n\ of\ the\ rates\ and\ repeating\ the\ process\ until\ the\ child\ population\ is\ full\r\n
comment4.params=pop
comment4.target=void\ printPopulation(java.util.ArrayList)
comment4.text=\r\n\ helper\ method\ to\ print\ out\ the\ population\r\n
comment5.params=length
comment5.target=java.lang.String\ createRandomBitString(int)
comment5.text=\r\n\ creates\ the\ string\ for\ the\ genome\ by\ using\ random\ numbers\ to\ assign\ each\ character\ as\ a\ 0\ or\ 1\r\n
comment6.params=gene
comment6.target=int\ fitnessAssess(Genome)
comment6.text=\r\n\ assess\ the\ genome's\ fitness\ by\ counting\ every\ occurance\ of\ the\ bit\ 1\r\n
comment7.params=pop
comment7.target=void\ evaluateTheFitness(java.util.ArrayList)
comment7.text=\r\n\ calculates\ the\ average\ fitness\ and\ best\ fitness\ of\ a\ population\r\n
comment8.params=a\ b
comment8.target=java.util.ArrayList\ crossOver(Genome,\ Genome)
comment8.text=\r\n\ performs\ crossover\ of\ two\ genomes\ and\ returns\ an\ arraylist\ of\ the\ two\ genomes\r\n
comment9.params=mut\ mutRate
comment9.target=Genome\ mutate(Genome,\ double)
comment9.text=\r\n\ performs\ mutation\ at\ a\ random\ point\r\n
numComments=16
